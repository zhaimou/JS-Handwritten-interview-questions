// 1. 定义正则表达式语法：
const regObj = /表达式/;
// 2.判断是否有符合规则的字符串：
// test() 方法 用来查看正则表达式与指定的字符串是否匹配 语法：
console.log(/表振/.test("真实点表振真实的"));
console.log(regObj.test("表达式啊是范德萨"));
console.log(/哈/.test("哈")); // true
console.log(/哈/.test("哈哈")); // true
console.log(/哈/.test("二哈")); // true
// 3.检索（查找）符合规则的字符串：
// exec() 方法 在一个指定字符串中执行一个搜索匹配 如果匹配成功，exec() 方法返回一个数组，否则返回null
const Str = "afdsa表达式真实的应该正确的表达式岁岁表达式表达式岁";
const res = regObj.exec(Str);
console.log(arr);
// 普通字符:
// 大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。
// 也就是说普通字符只能够匹配字符串中与它们相同的字符。
// 元字符(特殊字符）:
// 是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。
// 比如，规定用户只能输入英文26个英文字母，普通字符的话 abcdefghijklm…..
// 限定符 used？ ?限定符d这个字符可有可无 {0,1}
//       uesd*  *限定符这个字符代表可有多次和可无 {0,}
//  used+  +限定符这个字符代表一次h多次{1,}
// used{2,6}  d必须出现2，6之间
// 匹配多个字符的重复(az)+
//  但是换成元字符写法： [a-z]
// 为了方便记忆和学习，我们对众多的元字符进行了分类：
// 边界符（表示位置，开头和结尾，必须用什么开头，用什么结尾）
// 字符类 （比如 \d 表示 0~9）
// 如果 ^ 和 $ 在一起，表示必须是精确匹配。
// ^匹配行首的文本
// $匹配行尾的文本
// const regObj2 = /^a-z$/;
// reg
// 或运算符
// const regOJ = /a (obj | size)/
// []要求匹配中
// const regObj1 = /[^a-z]+/
// 另外正则表达式中其实为我们预先定义号一系列常用的字符类型
// 元字符
// \d  代表 [0-9]
// \w+ 英文 数字 下划线
// \s 空白 和制表符
// \D  非数字字符
// \W 非字母字符
// \S 非空白字符
// .代表任意字符
//  \b \black
